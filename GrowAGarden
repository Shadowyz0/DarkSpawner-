-- Load Rayfield
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Dark Spawner",
   Icon = 0,
   LoadingTitle = "Dark Spawner",
   LoadingSubtitle = "by whqtt",
   ShowText = "Rayfield",
   Theme = "Default",
   ToggleUIKeybind = "K",
   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false,
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = "Big Hub"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink",
      RememberJoins = true
   },
   KeySystem = false,
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key",
      SaveKey = true,
      GrabKeyFromSite = false,
      Key = {"Hello"}
   }
})

wait(0.1)

Rayfield:Destroy()

-- Create your custom loading screen
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "Dark Spawner Loading"
ScreenGui.ResetOnSpawn = false
ScreenGui.IgnoreGuiInset = true
ScreenGui.Parent = game:GetService("CoreGui")

-- Blurred background
local Blur = Instance.new("BlurEffect")
Blur.Size = 12
Blur.Parent = game:GetService("Lighting")

-- Beep sound
local BeepSound = Instance.new("Sound")
BeepSound.SoundId = "rbxassetid://911882856" -- Example beep
BeepSound.Volume = 0.5
BeepSound.Parent = ScreenGui

-- Centered panel frame
local Panel = Instance.new("Frame")
Panel.Size = UDim2.new(0, 400, 0, 220)
Panel.Position = UDim2.new(0.5, -200, 0.5, -110)
Panel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
Panel.BorderSizePixel = 0
Panel.Parent = ScreenGui

-- Colorful border glow
local UIStroke = Instance.new("UIStroke")
UIStroke.Color = Color3.fromRGB(0, 170, 255)
UIStroke.Thickness = 2
UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
UIStroke.Parent = Panel

local Corner = Instance.new("UICorner")
Corner.CornerRadius = UDim.new(0, 8)
Corner.Parent = Panel

-- Loading text label with animated dots
local LoadingLabel = Instance.new("TextLabel")
LoadingLabel.Size = UDim2.new(1, -20, 0, 40)
LoadingLabel.Position = UDim2.new(0, 10, 0, 30)
LoadingLabel.BackgroundTransparency = 1
LoadingLabel.TextColor3 = Color3.new(1, 1, 1)
LoadingLabel.Font = Enum.Font.GothamBold
LoadingLabel.TextSize = 24
LoadingLabel.Text = "Loading 0%"
LoadingLabel.TextStrokeTransparency = 0.5
LoadingLabel.Parent = Panel

-- Status text label with shadow
local StatusLabel = Instance.new("TextLabel")
StatusLabel.Size = UDim2.new(1, -20, 0, 30)
StatusLabel.Position = UDim2.new(0, 10, 0, 80)
StatusLabel.BackgroundTransparency = 1
StatusLabel.TextColor3 = Color3.new(1, 1, 1)
StatusLabel.Font = Enum.Font.Gotham
StatusLabel.TextSize = 22
StatusLabel.TextStrokeTransparency = 0.5
StatusLabel.Text = "Initializing..."
StatusLabel.Parent = Panel

-- Outer frame for the loading bar
local BarBackground = Instance.new("Frame")
BarBackground.Size = UDim2.new(1, -40, 0, 30)
BarBackground.Position = UDim2.new(0, 20, 0, 130)
BarBackground.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
BarBackground.BorderSizePixel = 0
BarBackground.Parent = Panel

local BarCorner = Instance.new("UICorner")
BarCorner.CornerRadius = UDim.new(0, 4)
BarCorner.Parent = BarBackground

-- Inner fill bar
local BarFill = Instance.new("Frame")
BarFill.Size = UDim2.new(0, 0, 1, 0)
BarFill.BackgroundColor3 = Color3.fromRGB(0, 170, 0)
BarFill.BorderSizePixel = 0
BarFill.Parent = BarBackground

local FillCorner = Instance.new("UICorner")
FillCorner.CornerRadius = UDim.new(0, 4)
FillCorner.Parent = BarFill

-- Status messages
local StatusMessages = {
    "Initializing Script...",
    "Preparing Resources...",
    "Verifying Integrity...",
    "Connecting to Services...",
    "Synchronizing Data...",
    "Compiling Modules...",
    "Resolving Dependencies...",
    "Optimizing Performance...",
    "Enhancing Security...",
    "Generating Assets...",
    "Calibrating Settings...",
    "Validating Environment...",
    "Establishing Communication...",
    "Finalizing Configuration...",
    "Almost Ready...",
    "Just a Moment Longer...",
    "Putting Everything in Place...",
    "The Spawner is Almost Complete...",
    "Thank You for Waiting...",
    "Finishing Touches..."
}

-- Timing
local totalDuration = 600
local updateInterval = 1
local statusInterval = totalDuration / #StatusMessages
local elapsed = 0
local statusIndex = 1
local statusElapsed = 0
local dotElapsed = 0
local dotCount = 0

-- Loop
while elapsed < totalDuration do
    wait(updateInterval)
    elapsed = elapsed + updateInterval
    statusElapsed = statusElapsed + updateInterval
    dotElapsed = dotElapsed + updateInterval

    -- Update percentage
    local percent = math.floor((elapsed / totalDuration) * 100)
    
    -- Animate dots
    if dotElapsed >= 0.5 then
        dotElapsed = 0
        dotCount = dotCount + 1
        if dotCount > 3 then
            dotCount = 0
        end
    end
    local dots = string.rep(".", dotCount)
    LoadingLabel.Text = "Loading" .. dots .. " " .. percent .. "%"

    -- Update bar fill
    BarFill.Size = UDim2.new(elapsed / totalDuration, 0, 1, 0)

    -- Update status
    if statusElapsed >= statusInterval then
        statusElapsed = 0
        statusIndex = statusIndex + 1
        if statusIndex > #StatusMessages then
            statusIndex = 1
        end
        StatusLabel.Text = StatusMessages[statusIndex]
        BeepSound:Play()
    end
end

-- Cleanup
ScreenGui:Destroy()
Blur:Destroy()
